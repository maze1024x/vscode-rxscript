export let BuiltinRawIndex = {
"ns": "",
"items": [
["type", "<InvalidType>", "interface {}"],
["type", "<GenericType>", "native"],
["type", "IntoReflectType", "native"],
["type", "IntoReflectValue", "native"],
["type", "DummyReflectType", "native"],
["const", "ReflectType", "DummyReflectType"],
["function", "DebugInspect", "T", "[T] { hint String, v IntoReflectValue[T] } T"],
["function", "DebugExpose", "$[Null]", "[T] { name String, v IntoReflectValue[T] } $[Null]"],
["function", "DebugTrace", "$[T]", "[T] { hint String, o IntoReflectValue[$[T]] } $[T]"],
["function", "DebugWatch", "$[Null]", "[T] { hint String, o IntoReflectValue[$[T]] } $[Null]"],
["function", "Serialize", "$[String]", "[T] { v IntoReflectValue[T] } $[String]"],
["function", "Deserialize", "$[T]", "[T] { s String, t IntoReflectType[T] } $[T]"],
["function", "<ObjectPairEqualities>", "$[Bool]", "[T] { o $[Pair[T,T]] } $[Bool]"],
["type", "Null", "native"],
["const", "Null", "Null"],
["type", "Error", "native"],
["function", "<Error>", "Error", "{ msg String } Error"],
["function", "Error", "Error", "{ msg List[~String] } Error"],
["method", "Message", "String"],
["method", "IsCancel", "Bool"],
["operator", "wrap", "Error", "{ err Error, msg String } Error"],
["function", "Undefined", "T", "[T] { msg String('') } T"],
["type", "Bool", "native"],
["const", "No", "Bool"],
["const", "Yes", "Bool"],
["function", "Not", "Bool", "{ p Bool }         Bool"],
["operator", "and", "Bool", "{ p Bool, q Bool } Bool"],
["operator", "or", "Bool", "{ p Bool, q Bool } Bool"],
["operator", "==", "Bool", "{ p Bool, q Bool } Bool"],
["operator", "assert", "T", "[T] { ok Bool, k Lambda[Null,T] } T"],
["type", "Ordering", "enum { L<R, L=R, L>R }"],
["enum-value", "L<R", "Ordering"],
["enum-value", "L=R", "Ordering"],
["enum-value", "L>R", "Ordering"],
["operator", "==", "Bool", "{ o1 Ordering, o2 Ordering } Bool"],
["type", "==", "interface { Operator Lambda[Pair[T,T],Bool] }"],
["abstract-method", "Operator", "Lambda[Pair[T,T],Bool]"],
["type", "<", "interface { Operator Lambda[Pair[T,T],Bool] }"],
["abstract-method", "Operator", "Lambda[Pair[T,T],Bool]"],
["type", "<>", "interface { Operator Lambda[Pair[T,T],Ordering] }"],
["abstract-method", "Operator", "Lambda[Pair[T,T],Ordering]"],
["operator", "!=", "Bool", "[T] { a T, b T } { T/== ==[T] } Bool"],
["operator", ">", "Bool", "[T] { a T, b T } { T/< <[T] }   Bool"],
["operator", "<=", "Bool", "[T] { a T, b T } { T/< <[T] }   Bool"],
["operator", ">=", "Bool", "[T] { a T, b T } { T/< <[T] }   Bool"],
["function", "Min", "T", "[T] { a T, b T } { T/< <[T] }   T"],
["function", "Max", "T", "[T] { a T, b T } { T/< <[T] }   T"],
["type", "Int", "native"],
["operator", "+", "Int", "{ a Int, b Int } Int"],
["operator", "-", "Int", "{ a Int, b Int } Int"],
["operator", "*", "Int", "{ a Int, b Int } Int"],
["operator", "/", "Int", "{ a Int, b Int } Int"],
["operator", "%", "Int", "{ a Int, b Int } Int"],
["operator", "^", "Int", "{ a Int, b Int } Int"],
["operator", "==", "Bool", "{ a Int, b Int } Bool"],
["operator", "<", "Bool", "{ a Int, b Int } Bool"],
["operator", "<>", "Ordering", "{ a Int, b Int } Ordering"],
["type", "Float", "native"],
["operator", "+", "Float", "{ x Float, y Float } Float"],
["operator", "-", "Float", "{ x Float, y Float } Float"],
["operator", "*", "Float", "{ x Float, y Float } Float"],
["operator", "/", "Float", "{ x Float, y Float } Float"],
["operator", "%", "Float", "{ x Float, y Float } Float"],
["operator", "^", "Float", "{ x Float, y Float } Float"],
["operator", "==", "Bool", "{ x Float, y Float } Bool"],
["operator", "<", "Bool", "{ x Float, y Float } Bool"],
["function", "Floor", "Float", "{ x Float } Float"],
["function", "Ceil", "Float", "{ x Float } Float"],
["function", "Round", "Float", "{ x Float } Float"],
["function", "Sqrt", "Float", "{ x Float } Float"],
["function", "Cbrt", "Float", "{ x Float } Float"],
["function", "Exp", "Float", "{ x Float } Float"],
["function", "Log", "Float", "{ x Float } Float"],
["function", "Sin", "Float", "{ x Float } Float"],
["function", "Cos", "Float", "{ x Float } Float"],
["function", "Tan", "Float", "{ x Float } Float"],
["function", "Asin", "Float", "{ x Float } Float"],
["function", "Acos", "Float", "{ x Float } Float"],
["function", "Atan", "Float", "{ x Float } Float"],
["function", "Atan2", "Float", "{ y Float, x Float } Float"],
["const", "E", "Float"],
["const", "PI", "Float"],
["method", "Int", "Int"],
["method", "Float", "Float"],
["method", "Normal", "Bool"],
["method", "NaN", "Bool"],
["method", "Infinite", "Bool"],
["const", "NaN", "Float"],
["const", "+Inf", "Float"],
["const", "-Inf", "Float"],
["type", "Char", "native"],
["function", "Char", "Char", "{ value Int } Char"],
["method", "Int", "Int"],
["method", "Utf8Size", "Int"],
["operator", "==", "Bool", "{ a Char, b Char } Bool"],
["operator", "<", "Bool", "{ a Char, b Char } Bool"],
["operator", "<>", "Ordering", "{ a Char, b Char } Ordering"],
["type", "String", "native"],
["function", "String", "String", "{ fragments List[~String] } String"],
["function", "StringFromChars", "String", "{ chars List[Char] } String"],
["function", "Quote", "String", "{ s String } String"],
["function", "Unquote", "Maybe[String]", "{ s String } Maybe[String]"],
["method", "Empty", "Bool"],
["method", "Chars", "List[Char]"],
["method", "FirstChar", "Maybe[Char]"],
["method", "NumberOfChars", "Int"],
["method", "Utf8Size", "Int"],
["operator", "==", "Bool", "{ a String, b String } Bool"],
["operator", "<", "Bool", "{ a String, b String } Bool"],
["operator", "<>", "Ordering", "{ a String, b String } Ordering"],
["operator", "shift", "Maybe[Pair[Char,String]]", "{ s String } Maybe[Pair[Char,String]]"],
["operator", "reverse", "String", "{ s String } String"],
["operator", "join", "String", "{ l List[String], sep String } String"],
["operator", "split", "List[String]", "{ s String, sep String } List[String]"],
["operator", "cut", "Maybe[Pair[String,String]]", "{ s String, sep String } Maybe[Pair[String,String]]"],
["operator", "has-prefix", "Bool", "{ s String, prefix String } Bool"],
["operator", "has-suffix", "Bool", "{ s String, suffix String } Bool"],
["operator", "trim-prefix", "String", "{ s String, prefix String } String"],
["operator", "trim-suffix", "String", "{ s String, suffix String } String"],
["operator", "trim", "String", "{ s String, chars List[Char] } String"],
["operator", "trim-left", "String", "{ s String, chars List[Char] } String"],
["operator", "trim-right", "String", "{ s String, chars List[Char] } String"],
["type", "RegExp", "native"],
["method", "String", "String"],
["operator", "advance", "Maybe[Pair[String,String]]", "{ s String, re RegExp } Maybe[Pair[String,String]]"],
["operator", "satisfy", "Bool", "{ s String, re RegExp } Bool"],
["operator", "replace", "String", "{ s String, re RegExp, f Lambda[String,String] } String"],
["type", "~String", "interface { String String }"],
["abstract-method", "String", "String"],
["method", "String", "String"],
["method", "String", "String"],
["method", "String", "String"],
["method", "String", "String"],
["method", "String", "String"],
["function", "ParseInt", "Maybe[Int]", "{ s String } Maybe[Int]"],
["function", "ParseFloat", "Maybe[Float]", "{ s String } Maybe[Float]"],
["type", "Bytes", "native"],
["type", "List", "native"],
["function", "List", "List[T]", "[T] { items List[T] } List[T]"],
["function", "ListConcat", "List[T]", "[T] { lists List[List[T]] } List[T]"],
["function", "Cons", "List[T]", "[T] { head T, tail List[T] } List[T]"],
["function", "Count", "List[Int]", "{ n Int } List[Int]"],
["method", "Empty", "Bool"],
["method", "First", "Maybe[T]"],
["method", "Length", "Int"],
["method", "Seq", "Seq[T]"],
["method", "$", "$[T]"],
["operator", "shift", "Maybe[Pair[T,List[T]]]", "[T]   { l List[T] } Maybe[Pair[T,List[T]]]"],
["operator", "prepend", "List[T]", "[T] { l List[T], item T } List[T]"],
["operator", "reverse", "List[T]", "[T] { l List[T] } List[T]"],
["operator", "sort", "List[T]", "[T] { l List[T] } { T/< <[T] } List[T]"],
["operator", "take", "List[T]", "[T] { l List[T], n Int } List[T]"],
["operator", "with-index", "List[Pair[T,Int]]", "[T] { l List[T] } List[Pair[T,Int]]"],
["operator", "map", "List[B]", "[A,B]  { l List[A], f Lambda[A,B] } List[B]"],
["operator", "map?", "List[B]", "[A,B] { l List[A], f Lambda[A,Maybe[B]] } List[B]"],
["operator", "map*", "List[B]", "[A,B] { l List[A], f Lambda[A,List[B]] } List[B]"],
["operator", "filter", "List[T]", "[T] { l List[T], f Lambda[T,Bool] } List[T]"],
["operator", "scan", "List[B]", "[A,B] { l List[A], v B, f Lambda[Pair[B,A],B] } List[B]"],
["operator", "fold", "B", "[A,B] { l List[A], v B, f Lambda[Pair[B,A],B] } B"],
["type", "Seq", "native"],
["function", "Seq", "Seq[T]", "[T] { items List[T] } Seq[T]"],
["method", "Empty", "Bool"],
["method", "Last", "Maybe[T]"],
["method", "Length", "Int"],
["method", "List", "List[T]"],
["operator", "append", "Seq[T]", "[T] { s Seq[T], item T } Seq[T]"],
["operator", "append?", "Seq[T]", "[T] { s Seq[T], item? Maybe[T] } Seq[T]"],
["operator", "append*", "Seq[T]", "[T] { s Seq[T], items List[T] } Seq[T]"],
["operator", "sort", "Seq[T]", "[T] { s Seq[T] } { T/< <[T] } Seq[T]"],
["operator", "filter", "Seq[T]", "[T] { s Seq[T], f Lambda[T,Bool] } Seq[T]"],
["type", "Queue", "native"],
["function", "Queue", "Queue[T]", "[T] { items List[T] } Queue[T]"],
["method", "Empty", "Bool"],
["method", "Size", "Int"],
["method", "First", "Maybe[T]"],
["method", "List", "List[T]"],
["operator", "shift", "Maybe[Pair[T,Queue[T]]]", "[T]  { q Queue[T] } Maybe[Pair[T,Queue[T]]]"],
["operator", "append", "Queue[T]", "[T] { q Queue[T], item T } Queue[T]"],
["type", "Heap", "native"],
["function", "Heap", "Heap[T]", "[T] { items List[T] } { T/< <[T] } Heap[T]"],
["method", "Empty", "Bool"],
["method", "Size", "Int"],
["method", "First", "Maybe[T]"],
["method", "List", "List[T]"],
["operator", "shift", "Maybe[Pair[T,Heap[T]]]", "[T]  { h Heap[T] } Maybe[Pair[T,Heap[T]]]"],
["operator", "insert", "Heap[T]", "[T] { h Heap[T], item T } Heap[T]"],
["type", "Set", "native"],
["function", "Set", "Set[T]", "[T] { items List[T] } { T/<> <>[T] } Set[T]"],
["method", "Empty", "Bool"],
["method", "Size", "Int"],
["method", "List", "List[T]"],
["operator", "has", "Bool", "[T] { s Set[T], item T } Bool"],
["operator", "delete", "Set[T]", "[T] { s Set[T], item T } Set[T]"],
["operator", "insert", "Set[T]", "[T] { s Set[T], item T } Set[T]"],
["type", "Map", "native"],
["function", "Map", "Map[K,V]", "[K,V] { entries List[Pair[K,V]] } { K/<> <>[K] } Map[K,V]"],
["method", "Empty", "Bool"],
["method", "Size", "Int"],
["method", "Keys", "List[K]"],
["method", "Values", "List[V]"],
["method", "Entries", "List[Pair[K,V]]"],
["operator", "has", "Bool", "[K,V] { m Map[K,V], key K } Bool"],
["operator", "lookup", "Maybe[V]", "[K,V] { m Map[K,V], key K } Maybe[V]"],
["operator", "delete", "Map[K,V]", "[K,V] { m Map[K,V], key K } Map[K,V]"],
["operator", "insert", "Map[K,V]", "[K,V] { m Map[K,V], pair Pair[K,V] } Map[K,V]"],
["type", "$", "native"],
["function", "$", "$[T]", "[T] { items List[T] } $[T]"],
["function", "return", "$[T]", "[T] { items List[T] } $[T]"],
["function", "Merge", "$[T]", "[T] { items List[$[T]] } $[T]"],
["function", "Concat", "$[T]", "[T] { items List[$[T]] } $[T]"],
["function", "StartWith", "$[T]", "[T] { v T, o $[T] } $[T]"],
["function", "Go", "$[T]", "[T] { k Lambda[Null,T] } $[T]"],
["function", "ForkJoin", "$[List[T]]", "[T] { items List[$[T]], n Int(NumCPU) } $[List[T]]"],
["function", "WithChildContext", "$[T]", "[T] { o $[T] } $[T]"],
["function", "WithCancelTrigger", "$[T]", "[T] { cancel $[Null], o $[T] } $[T]"],
["function", "WithCancelTimeout", "$[T]", "[T] { ms Int, o $[T] } $[T]"],
["function", "SetTimeout", "$[Null]", "{ ms Int } $[Null]"],
["function", "SetInterval", "$[Int]", "{ ms Int, n Int(-1) } $[Int]"],
["function", "Throw", "$[T]", "[T] { err Error } $[T]"],
["function", "Crash", "$[T]", "[T] { err Error } $[T]"],
["method", "Result", "$[Result[T]]"],
["operator", "catch", "$[T]", "[T] { o $[T], f Lambda[Pair[Error,$[T]],$[T]] } $[T]"],
["operator", "retry", "$[T]", "[T] { o $[T], n Int(-1) } $[T]"],
["operator", "log-error", "$[T]", "[T] { o $[T] } $[T]"],
["operator", "distinct-until-changed", "$[T]", "[T] { o $[T] } { T/== ==[T] } $[T]"],
["operator", "with-latest-from", "$[Pair[T,X]]", "[T,X] { o $[T], x $[X] } $[Pair[T,X]]"],
["operator", "map-to-latest-from", "$[X]", "[X] { o $[Null], x $[X] } $[X]"],
["operator", "with-cycle", "$[Pair[T,X]]", "[T,X] { o $[T], l List[X] } $[Pair[T,X]]"],
["operator", "with-index", "$[Pair[T,Int]]", "[T] { o $[T] } $[Pair[T,Int]]"],
["operator", "with-time", "$[Pair[T,Time]]", "[T] { o $[T] } $[Pair[T,Time]]"],
["operator", "delay-subscription", "$[T]", "[T] { o $[T], ms Int } $[T]"],
["operator", "delay-values", "$[T]", "[T] { o $[T], ms Int } $[T]"],
["operator", "start-with", "$[T]", "[T] { o $[T], item T } $[T]"],
["operator", "end-with", "$[T]", "[T]   { o $[T], item T } $[T]"],
["operator", "throttle", "$[T]", "[T] { o $[T], f Lambda[T,$[Null]] } $[T]"],
["operator", "debounce", "$[T]", "[T] { o $[T], f Lambda[T,$[Null]] } $[T]"],
["operator", "throttle-time", "$[T]", "[T] { o $[T], ms Int } $[T]"],
["operator", "debounce-time", "$[T]", "[T] { o $[T], ms Int } $[T]"],
["operator", "complete-on-emit", "$[Null]", "[T] { o $[T] } $[Null]"],
["operator", "skip", "$[T]", "[T] { o $[T], n Int } $[T]"],
["operator", "take", "$[T]", "[T] { o $[T], n Int } $[T]"],
["operator", "take-last", "$[T]", "[T] { o $[T] } $[T]"],
["operator", "take-last?", "$[Maybe[T]]", "[T] { o $[T] } $[Maybe[T]]"],
["operator", "take-while", "$[T]", "[T] { o $[T], f Lambda[T,Bool] } $[T]"],
["operator", "take-while?", "$[T]", "[T] { o $[Maybe[T]] } $[T]"],
["operator", "take-until", "$[T]", "[T] { o $[T], stop $[Null] } $[T]"],
["operator", "count", "$[Int]", "[T] { o $[T] } $[Int]"],
["operator", "collect", "$[List[T]]", "[T] { o $[T], n Int(-1) } $[List[T]]"],
["operator", "buffer-time", "$[List[T]]", "[T] { o $[T], ms Int } $[List[T]]"],
["operator", "pairwise", "$[Pair[T,T]]", "[T] { o $[T] } $[Pair[T,T]]"],
["operator", "buffer-count", "$[Queue[T]]", "[T] { o $[T], n Int } $[Queue[T]]"],
["operator", "map", "$[B]", "[A,B] { o $[A], f Lambda[A,B] } $[B]"],
["operator", "map-to", "$[B]", "[A,B] { o $[A], v B } $[B]"],
["operator", "filter", "$[T]", "[T] { o $[T], f Lambda[T,Bool] } $[T]"],
["operator", "scan", "$[B]", "[A,B] { o $[A], v B, f Lambda[Pair[B,A],B] } $[B]"],
["operator", "reduce", "$[B]", "[A,B] { o $[A], v B, f Lambda[Pair[B,A],B] } $[B]"],
["operator", "combine-latest", "$[Pair[A,B]]", "[A,B] { a $[A], b $[B] } $[Pair[A,B]]"],
["operator", "combine-latest", "$[List[T]]", "[T] { l List[$[T]] } $[List[T]]"],
["operator", "await", "$[B]", "[A,B] { o $[A], k Lambda[A,$[B]] } $[B]"],
["operator", "await-noexcept", "$[B]", "[A,B] { o $[A], k Lambda[A,$[B]] } $[B]"],
["operator", "then", "$[T]", "[T] { o $[Null], k $[T] } $[T]"],
["operator", "with", "$[T]", "[T] { o $[T], bg $[Null] } $[T]"],
["operator", "and", "$[T]", "[T] { o $[T], bg $[Null] } $[T]"],
["operator", "auto-map", "$[B]", "[A,B] { o $[A], f Lambda[A,$[B]] } $[B]"],
["operator", "merge", "$[T]", "[T]  { l List[$[T]] } $[T]"],
["operator", "concat", "$[T]", "[T] { l List[$[T]] } $[T]"],
["operator", "merge", "$[T]", "[T]  { o1 $[T], o2 $[T] } $[T]"],
["operator", "concat", "$[T]", "[T] { o1 $[T], o2 $[T] } $[T]"],
["operator", "merge-map", "$[B]", "[A,B]   { o $[A], f Lambda[A,$[B]] } $[B]"],
["operator", "concat-map", "$[B]", "[A,B]  { o $[A], f Lambda[A,$[B]] } $[B]"],
["operator", "switch-map", "$[B]", "[A,B]  { o $[A], f Lambda[A,$[B]] } $[B]"],
["operator", "exhaust-map", "$[B]", "[A,B] { o $[A], f Lambda[A,$[B]] } $[B]"],
["const", "NumCPU", "Int"],
["operator", "concurrent", "$[T]", "[T] { l List[$[T]], n Int(NumCPU) } $[T]"],
["operator", "concurrent-map", "$[B]", "[A,B] { o $[A], f Lambda[A,$[B]], n Int(NumCPU) } $[B]"],
["operator", "fork-join", "$[List[T]]", "[T] { l List[$[T]], n Int(NumCPU) } $[List[T]]"],
["operator", "fork-join", "$[Pair[A,B]]", "[A,B] { a $[A], b $[B], n Int(NumCPU) } $[Pair[A,B]]"],
["const", "UUID", "$[String]"],
["function", "Random", "$[Int]", "{ supremum Int } $[Int]"],
["function", "Shuffle", "$[List[T]]", "[T] { l List[T] } $[List[T]]"],
["type", "Subject", "native"],
["function", "CreateSubject", "$[Subject[T]]", "[T] { replay Int(0), items List[T] } $[Subject[T]]"],
["method", "$", "$[T]"],
["method", "Values", "$[T]"],
["operator", "<<", "$[Null]", "[T] { s Subject[T], o $[T] } $[Null]"],
["operator", "<-", "$[Null]", "[T] { s Subject[T], v T } $[Null]"],
["operator", "plug", "$[Null]", "[T] { s Subject[T], o $[T] } $[Null]"],
["operator", "push", "$[Null]", "[T] { s Subject[T], v T } $[Null]"],
["function", "Multicast", "$[$[T]]", "[T] { o $[T] } $[$[T]]"],
["function", "Loopback", "$[T]", "[T] { k Lambda[$[T],$[T]] } $[T]"],
["function", "SkipSync", "$[T]", "[T] { o $[T] } $[T]"],
["type", "State", "record {\n    <Subject> Subject[T]\n}"],
["field", "<Subject>", "Subject[T]"],
["function", "CreateState", "$[State[T]]", "[T] { initial T } $[State[T]]"],
["method", "$", "$[T]"],
["method", "Value", "$[T]"],
["operator", "bind-update", "$[Null]", "[T] { state State[T], updates $[Lambda[T,T]] } $[Null]"],
["operator", "bind-override", "$[Null]", "[T] { state State[T], values $[T] } $[Null]"],
["operator", "update", "$[Null]", "[T] { state State[T], update Lambda[T,T] } $[Null]"],
["operator", "override", "$[Null]", "[T] { state State[T], value T } $[Null]"],
["function", "MakeMemo", "$[$[T]]", "[T] { o $[T] } $[$[T]]"],
["type", "Time", "native"],
["method", "String", "String"],
["operator", "-ms", "Int", "{ t Time, u Time } Int"],
["const", "Now", "$[Time]"],
["function", "TimeOf", "$[Time]", "[T] { o $[T] } $[Time]"],
["type", "Lambda", "native"],
["operator", "*", "Lambda[A,C]", "[A,B,C] { f Lambda[B,C], g Lambda[A,B] } Lambda[A,C]"],
["operator", "->", "B", "[A,B]   { x A, f Lambda[A,B] } B"],
["operator", "call", "B", "[A,B] { f Lambda[A,B], x A } B"],
["type", "Pair", "record {\n    First   A,\n    Second  B\n}"],
["field", "First", "A"],
["field", "Second", "B"],
["type", "Triple", "record {\n    First   A,\n    Second  B,\n    Third   C\n}"],
["field", "First", "A"],
["field", "Second", "B"],
["field", "Third", "C"],
["function", "Pair", "Pair[A,B]", "[A,B] { first A, second B } Pair[A,B]"],
["function", "Triple", "Triple[A,B,C]", "[A,B,C] { first A, second B, third C } Triple[A,B,C]"],
["type", "Maybe", "union {\n    Null,\n    OK\n}"],
["function", "Nothing", "Maybe[T]", "[T] {} Maybe[T]"],
["function", "Just", "Maybe[T]", "[T] { value T } Maybe[T]"],
["method", "List", "List[OK]"],
["method", "$", "$[OK]"],
["operator", "??", "T", "[T] { value? Maybe[T], fallback T } T"],
["operator", "map", "Maybe[B]", "[A,B] { v? Maybe[A], f Lambda[A,B] } Maybe[B]"],
["operator", "filter", "Maybe[T]", "[T] { v? Maybe[T], f Lambda[T,Bool] } Maybe[T]"],
["operator", "maybe", "Maybe[B]", "[A,B] { v? Maybe[A], k Lambda[A,Maybe[B]] } Maybe[B]"],
["type", "Result", "union {\n    Error,\n    OK\n}"],
["function", "Success", "Result[T]", "[T] { value T } Result[T]"],
["method", "Maybe", "Maybe[OK]"],
["operator", "map", "Result[B]", "[A,B] { r Result[A], f Lambda[A,B] } Result[B]"],
["type", "Lens1", "record {\n    Value   Part,\n    Assign  Lambda[Part,Whole]\n}"],
["field", "Value", "Part"],
["field", "Assign", "Lambda[Part,Whole]"],
["type", "Lens2", "record {\n    Value   Maybe[Concrete],\n    Assign  Lambda[Concrete,Abstract]\n}"],
["field", "Value", "Maybe[Concrete]"],
["field", "Assign", "Lambda[Concrete,Abstract]"],
["method", "Update", "Lambda[Lambda[Part,Part],Whole]"],
["method", "Update", "Lambda[Lambda[Maybe[Concrete],Concrete],Abstract]"],
["method", "Update?", "Lambda[Lambda[Part,Maybe[Part]],Maybe[Whole]]"],
["method", "Update?", "Lambda[Lambda[Maybe[Concrete],Maybe[Concrete]],Maybe[Abstract]]"],
["operator", "compose1", "Lens1[A,C]", "[A,B,C] { ab Lens1[A,B], f Lambda[B,Lens1[B,C]] } Lens1[A,C]"],
["operator", "compose2", "Lens2[A,C]", "[A,B,C] { ab Lens1[A,B], f Lambda[B,Lens2[B,C]] } Lens2[A,C]"],
["operator", "compose", "Lens2[A,C]", "[A,B,C] { ab Lens2[A,B], f Lambda[Maybe[B],Lens2[B,C]] } Lens2[A,C]"],
["function", "Get", "$[Resp]", "[Resp] { endpoint String, t IntoReflectType[Resp], token String('') } $[Resp]"],
["function", "Post", "$[Resp]", "[Req,Resp] { data IntoReflectValue[Req], endpoint String, t IntoReflectType[Resp], token String('') } $[Resp]"],
["function", "Put", "$[Resp]", "[Req,Resp] { data IntoReflectValue[Req], endpoint String, t IntoReflectType[Resp], token String('') } $[Resp]"],
["function", "Delete", "$[Resp]", "[Resp] { endpoint String, t IntoReflectType[Resp], token String('') } $[Resp]"],
["function", "Subscribe", "$[Resp]", "[Resp] { endpoint String, t IntoReflectType[Resp], token String('') } $[Resp]"],
["type", "File", "native"],
["method", "String", "String"],
["operator", "==", "Bool", "{ f File, g File } Bool"],
["function", "ReadTextFile", "$[String]", "{ f File } $[String]"],
["function", "WriteTextFile", "$[Null]", "{ f File, text String } $[Null]"],
["function", "ReadConfig", "$[T]", "[T] { dir String, name String, default IntoReflectValue[T] } $[T]"],
["function", "WriteConfig", "$[Null]", "[T] { dir String, name String, value IntoReflectValue[T] } $[Null]"],
["const", "Arguments", "List[String]"],
["const", "Environment", "List[String]"],
["const", "FontSize", "Int"],
["function", "ShowInfo", "$[Null]", "{ content String, title String('Info') } $[Null]"],
["function", "ShowWarning", "$[Null]", "{ content String, title String('Warning') } $[Null]"],
["function", "ShowCritical", "$[Null]", "{ content String, title String('Error') } $[Null]"],
["function", "ShowYesNo", "$[Bool]", "{ content String, title String('Question') } $[Bool]"],
["function", "ShowAbortRetryIgnore", "$[Retry/Ignore]", "{ content String, title String('Error') } $[Retry/Ignore]"],
["function", "ShowSaveDiscardCancel", "$[Save/Discard]", "{ content String, title String('Save Changes') } $[Save/Discard]"],
["type", "Retry/Ignore", "enum { Retry, Ignore }"],
["enum-value", "Retry", "Retry/Ignore"],
["enum-value", "Ignore", "Retry/Ignore"],
["type", "Save/Discard", "enum { Save, Discard }"],
["enum-value", "Save", "Save/Discard"],
["enum-value", "Discard", "Save/Discard"],
["function", "GetChoice", "$[T]", "[T] { prompt String, items List[ComboBoxItem[T]], title String('Select') } $[T]"],
["function", "GetLine", "$[String]", "{ prompt String, initial String(''), title String('Input') } $[String]"],
["function", "GetText", "$[String]", "{ prompt String, initial String(''), title String('Input') } $[String]"],
["function", "GetInt", "$[Int]", "{ prompt String, initial Int(0), title String('Input') } $[Int]"],
["function", "GetFloat", "$[Float]", "{ prompt String, initial Float(0), title String('Input') } $[Float]"],
["function", "GetFileListToOpen", "$[List[File]]", "[T] { filter String } $[List[File]]"],
["function", "GetFileToOpen", "$[File]", "[T] { filter String } $[File]"],
["function", "GetFileToSave", "$[File]", "[T] { filter String } $[File]"],
["type", "Action", "native"],
["function", "Action", "Hook[Action]", "{\n    icon      Icon,\n    text      String,\n    shortcut  String (''),\n    repeat    Bool (No),\n    enable    $[Bool] ($())\n       }      Hook[Action]"],
["method", "Triggers", "$[Null]"],
["type", "ActionCheckBox", "record { Checked $[Bool] }"],
["field", "Checked", "$[Bool]"],
["function", "ActionCheckBox", "Hook[ActionCheckBox]", "{ action Action, checked Bool } Hook[ActionCheckBox]"],
["type", "ActionComboBox", "record { SelectedItem $[T] }"],
["field", "SelectedItem", "$[T]"],
["function", "ActionComboBox", "Hook[ActionComboBox[T]]", "[T] { items List[ActionComboBoxItem[T]] } Hook[ActionComboBox[T]]"],
["type", "ActionComboBoxItem", "record { Action Action, Value T, Selected Bool }"],
["field", "Action", "Action"],
["field", "Value", "T"],
["field", "Selected", "Bool"],
["function", "ActionComboBoxItem", "ActionComboBoxItem[T]", "[T] { action Action, value T, selected Bool } ActionComboBoxItem[T]"],
["type", "MenuBar", "record { Menus List[Menu] }"],
["field", "Menus", "List[Menu]"],
["function", "MenuBar", "MenuBar", "{ menus List[Menu] } MenuBar"],
["type", "ToolBar", "record { Mode ToolBarMode, Items List[ToolBarItem] }"],
["field", "Mode", "ToolBarMode"],
["field", "Items", "List[ToolBarItem]"],
["function", "ToolBar", "ToolBar", "{ mode ToolBarMode(IconOnly), items List[ToolBarItem] } ToolBar"],
["type", "ToolBarMode", "enum { IconOnly, TextOnly, TextBesideIcon, TextUnderIcon }"],
["enum-value", "IconOnly", "ToolBarMode"],
["enum-value", "TextOnly", "ToolBarMode"],
["enum-value", "TextBesideIcon", "ToolBarMode"],
["enum-value", "TextUnderIcon", "ToolBarMode"],
["type", "Menu", "record { Icon Icon, Name String, Items List[MenuItem] }"],
["field", "Icon", "Icon"],
["field", "Name", "String"],
["field", "Items", "List[MenuItem]"],
["function", "Menu", "Menu", "{ icon Icon, name String, items List[MenuItem] } Menu"],
["type", "MenuItem", "union { Menu, Action, Separator }"],
["type", "ToolBarItem", "union { Menu, Action, Separator, Widget, Spacer }"],
["type", "Separator", "record {}"],
["function", "Separator", "Separator", "{} Separator"],
["function", "<BindContextMenu>", "$[Null]", "{ w Widget, m Menu } $[Null]"],
["function", "ContextMenu", "Hook[Null]", "{ w Widget, m Menu } Hook[Null]"],
["type", "Widget", "native"],
["type", "Widgets", "union { Widget, List[Widget] }"],
["function", "<ShowAndActivate>", "$[Null]", "{ w Widget } $[Null]"],
["function", "<BindInlineStyleSheet>", "$[Null]", "{ w Widget, o $[String] } $[Null]"],
["function", "<ComboBoxSelectedItem>", "$[T]", "[T] { w Widget, items List[ComboBoxItem[T]] } $[T]"],
["function", "<CreateDynamicWidget>", "Hook[Widget]", "{ widgets $[Widget] } Hook[Widget]"],
["function", "<CreateWidget>", "Hook[Widget]", "{ l Layout, margin-x Int, margin-y Int, policy-x SizePolicy, policy-y SizePolicy } Hook[Widget]"],
["function", "<CreateScrollArea>", "Hook[Widget]", "{ scroll Scroll, l Layout, margin-x Int, margin-y Int } Hook[Widget]"],
["function", "<CreateGroupBox>", "Hook[Widget]", "{ title String, l Layout, margin-x Int, margin-y Int } Hook[Widget]"],
["function", "<CreateSplitter>", "Hook[Widget]", "{ l List[Widget] } Hook[Widget]"],
["function", "<CreateMainWindow>", "Hook[Widget]", "{ menu-bar MenuBar, tool-bar ToolBar, l Layout, margin-x Int, margin-y Int, width Int, height Int, icon Icon } Hook[Widget]"],
["function", "<CreateDialog>", "Hook[Widget]", "{ l Layout, margin-x Int, margin-y Int, width Int, height Int, icon Icon } Hook[Widget]"],
["function", "<CreateLabel>", "Hook[Widget]", "{ align Align, selectable Bool } Hook[Widget]"],
["function", "<CreateIconLabel>", "Hook[Widget]", "{ icon Icon, size Int } Hook[Widget]"],
["function", "<CreateElidedLabel>", "Hook[Widget]", "{} Hook[Widget]"],
["function", "<CreateTextView>", "Hook[Widget]", "{ format TextFormat } Hook[Widget]"],
["function", "<CreateCheckBox>", "Hook[Widget]", "{ text String, checked Bool } Hook[Widget]"],
["function", "<CreateComboBox>", "Hook[Widget]", "[T] { items List[ComboBoxItem[T]] } Hook[Widget]"],
["function", "<CreatePushButton>", "Hook[Widget]", "{ icon Icon, text String, tooltip String } Hook[Widget]"],
["function", "<CreateLineEdit>", "Hook[Widget]", "{ text String } Hook[Widget]"],
["function", "<CreatePlainTextEdit>", "Hook[Widget]", "{ text String } Hook[Widget]"],
["function", "<CreateSlider>", "Hook[Widget]", "{ value Int, min Int, max Int } Hook[Widget]"],
["function", "<CreateProgressBar>", "Hook[Widget]", "{ max Int, format String } Hook[Widget]"],
["type", "<Signal>", "native"],
["type", "<Events>", "native"],
["function", "<Connect>", "$[T]", "[T] { s <Signal>[T], w Widget } $[T]"],
["function", "<Listen>", "$[T]", "[T]  { s <Events>[T], w Widget } $[T]"],
["const", "<<Toggled>>", "<Signal>[Null]"],
["const", "<<Clicked>>", "<Signal>[Null]"],
["const", "<<TextChanged0>>", "<Signal>[Null]"],
["const", "<<TextChanged1>>", "<Signal>[Null]"],
["const", "<<ReturnPressed>>", "<Signal>[Null]"],
["const", "<<ValueChanged>>", "<Signal>[Null]"],
["const", "<<Show>>", "<Events>[Null]"],
["const", "<<Close>>", "<Events>[Null]"],
["type", "<Prop>", "native"],
["function", "<Read>", "<Signal>[T]", "[T] { p <Prop>[T], s <Signal>[Null] } <Signal>[T]"],
["function", "<Bind>", "$[Null]", "[T] { p <Prop>[T], o $[T], w Widget } $[Null]"],
["function", "<ClearTextLater>", "$[T]", "[T] { w Widget, o $[T] } $[T]"],
["const", "<<Enabled>>", "<Prop>[Bool]"],
["const", "<<WindowTitle>>", "<Prop>[String]"],
["const", "<<Text>>", "<Prop>[String]"],
["const", "<<Checked>>", "<Prop>[Bool]"],
["const", "<<PlainText>>", "<Prop>[String]"],
["const", "<<Value>>", "<Prop>[Int]"],
["type", "Icon", "record { Name String }"],
["field", "Name", "String"],
["function", "Icon", "Icon", "{ name String('') } Icon"],
["type", "SizePolicy", "enum { Rigid, Controlled, Incompressible, IncompressibleExpanding, Free, FreeExpanding, Bounded }"],
["enum-value", "Rigid", "SizePolicy"],
["enum-value", "Controlled", "SizePolicy"],
["enum-value", "Incompressible", "SizePolicy"],
["enum-value", "IncompressibleExpanding", "SizePolicy"],
["enum-value", "Free", "SizePolicy"],
["enum-value", "FreeExpanding", "SizePolicy"],
["enum-value", "Bounded", "SizePolicy"],
["type", "Align", "enum { Default, Center, Left, Right, Top, Bottom, LeftTop, LeftBottom, RightTop, RightBottom }"],
["enum-value", "Default", "Align"],
["enum-value", "Center", "Align"],
["enum-value", "Left", "Align"],
["enum-value", "Right", "Align"],
["enum-value", "Top", "Align"],
["enum-value", "Bottom", "Align"],
["enum-value", "LeftTop", "Align"],
["enum-value", "LeftBottom", "Align"],
["enum-value", "RightTop", "Align"],
["enum-value", "RightBottom", "Align"],
["type", "Scroll", "enum { BothDirection, VerticalOnly, HorizontalOnly }"],
["enum-value", "BothDirection", "Scroll"],
["enum-value", "VerticalOnly", "Scroll"],
["enum-value", "HorizontalOnly", "Scroll"],
["type", "TextFormat", "enum { Plain, Html, Markdown }"],
["enum-value", "Plain", "TextFormat"],
["enum-value", "Html", "TextFormat"],
["enum-value", "Markdown", "TextFormat"],
["type", "Layout", "union { Row, Column, Grid }"],
["type", "LayoutItem", "union { Layout, Widget, Spacer, String }"],
["type", "Row", "record { Items List[LayoutItem], Spacing Int(4) }"],
["field", "Items", "List[LayoutItem]"],
["field", "Spacing", "Int"],
["type", "Column", "record { Items List[LayoutItem], Spacing Int(4) }"],
["field", "Items", "List[LayoutItem]"],
["field", "Spacing", "Int"],
["type", "Grid", "record { Items List[Span], RowSpacing Int(4), ColumnSpacing Int(4) }"],
["field", "Items", "List[Span]"],
["field", "RowSpacing", "Int"],
["field", "ColumnSpacing", "Int"],
["type", "Span", "record { Item LayoutItem, Row Int, Column Int, RowSpan Int, ColumnSpan Int, Align Align }"],
["field", "Item", "LayoutItem"],
["field", "Row", "Int"],
["field", "Column", "Int"],
["field", "RowSpan", "Int"],
["field", "ColumnSpan", "Int"],
["field", "Align", "Align"],
["type", "Spacer", "record { Width Int, Height Int, Expand Bool }"],
["field", "Width", "Int"],
["field", "Height", "Int"],
["field", "Expand", "Bool"],
["function", "Row", "Layout", "{ items List[LayoutItem] } Layout"],
["function", "Column", "Layout", "{ items List[LayoutItem] } Layout"],
["function", "Grid", "Layout", "{ spans List[Span] } Layout"],
["function", "Span", "Span", "{ item LayoutItem, row Int, column Int, align Align(Default), row-span Int(1), column-span Int(1) } Span"],
["function", "Spacer", "LayoutItem", "{ width Int(0), height Int(0), expand Bool(Yes) } LayoutItem"],
["function", "Aligned", "Layout", "{ align Align, item LayoutItem } Layout"],
["function", "Form", "Layout", "{ pairs List[Pair[LayoutItem,LayoutItem]] } Layout"],
["type", "Wrapper", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Wrapper", "Hook[Wrapper]", "{ layout Layout, policy-x SizePolicy(Free), policy-y SizePolicy(Free) } Hook[Wrapper]"],
["function", "WrapperWithMargins", "Hook[Wrapper]", "{ layout Layout, margin-x Int(6), margin-y Int(4), policy-x SizePolicy(Free), policy-y SizePolicy(Free) } Hook[Wrapper]"],
["type", "ScrollArea", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "ScrollArea", "Hook[ScrollArea]", "{ scroll Scroll, layout Layout } Hook[ScrollArea]"],
["function", "ScrollAreaWithMargins", "Hook[ScrollArea]", "{ scroll Scroll, layout Layout, margin-x Int(6), margin-y Int(4) } Hook[ScrollArea]"],
["type", "GroupBox", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "GroupBox", "Hook[GroupBox]", "{ title String, layout Layout, margin-x Int(0), margin-y Int(0) } Hook[GroupBox]"],
["type", "Splitter", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Splitter", "Hook[Splitter]", "{ content List[Widget] } Hook[Splitter]"],
["type", "Window", "record { Widget Widget, <Exit> $[Null] }"],
["field", "Widget", "Widget"],
["field", "<Exit>", "$[Null]"],
["function", "Window", "Hook[Window]", "{ title $[String], layout Layout, menu-bar MenuBar(MenuBar()), tool-bar ToolBar(ToolBar()), exit Lambda[$[Null],$[Null]] ({ closes => closes }), margin-x Int(6), margin-y Int(6), width Int(-1), height Int(-1), icon Icon(Icon('window')) } Hook[Window]"],
["type", "Dialog", "record { Widget Widget, <Exit> $[T] }"],
["field", "Widget", "Widget"],
["field", "<Exit>", "$[T]"],
["function", "Dialog", "Hook[Dialog[T]]", "[T] { title $[String], layout Layout, exit Lambda[$[Null],$[T]], margin-x Int(6), margin-y Int(6), width Int(-1), height Int(-1), icon Icon(Icon('window')) } Hook[Dialog[T]]"],
["type", "Switchable", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Switchable", "Hook[Switchable]", "{ widgets $[Widget] } Hook[Switchable]"],
["type", "Reloadable", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Reloadable", "Hook[Reloadable]", "{ hooks $[Hook[Widget]] } Hook[Reloadable]"],
["function", "LazyReloadable", "Hook[Reloadable]", "{ hooks $[Hook[Widget]] } Hook[Reloadable]"],
["type", "Label", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Label", "Hook[Label]", "{ text $[String], align Align(Left), selectable Bool(No) } Hook[Label]"],
["type", "ElidedLabel", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "ElidedLabel", "Hook[ElidedLabel]", "{ text $[String] } Hook[ElidedLabel]"],
["type", "IconLabel", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "IconLabel", "Hook[IconLabel]", "{ icon Icon, size IconSize(Auto) } Hook[IconLabel]"],
["type", "IconSize", "enum { Auto, Small, Medium, Large }"],
["enum-value", "Auto", "IconSize"],
["enum-value", "Small", "IconSize"],
["enum-value", "Medium", "IconSize"],
["enum-value", "Large", "IconSize"],
["type", "TextView", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "TextView", "Hook[TextView]", "{ text $[String], format TextFormat(Plain) } Hook[TextView]"],
["type", "CheckBox", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "CheckBox", "Hook[CheckBox]", "{ text String, checked Bool } Hook[CheckBox]"],
["method", "Checked", "$[Bool]"],
["type", "ComboBox", "record { Widget Widget, SelectedItem $[T] }"],
["field", "Widget", "Widget"],
["field", "SelectedItem", "$[T]"],
["function", "ComboBox", "Hook[ComboBox[T]]", "[T] { items List[ComboBoxItem[T]] } Hook[ComboBox[T]]"],
["type", "ComboBoxItem", "record { Icon Icon, Name String, Value T, Selected Bool }"],
["field", "Icon", "Icon"],
["field", "Name", "String"],
["field", "Value", "T"],
["field", "Selected", "Bool"],
["function", "ComboBoxItem", "ComboBoxItem[T]", "[T] { icon Icon, name String, value T, selected Bool } ComboBoxItem[T]"],
["type", "Button", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Button", "Hook[Button]", "{ icon Icon, text String, tooltip String(''), enable $[Bool]($()) } Hook[Button]"],
["function", "PlainButton", "Hook[Button]", "{ text String, enable $[Bool]($()) } Hook[Button]"],
["function", "IconButton", "Hook[Button]", "{ icon Icon, tooltip String, enable $[Bool]($()) } Hook[Button]"],
["method", "Clicks", "$[Null]"],
["type", "TextBox", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "TextBox", "Hook[TextBox]", "{ text String('') } Hook[TextBox]"],
["method", "Text", "$[String]"],
["method", "Enters", "$[Null]"],
["method", "TextOn", "Lambda[$[Null],$[String]]"],
["method", "TextOnEnters", "$[String]"],
["operator", "bind-override", "$[Null]", "{ edit TextBox, text $[String] } $[Null]"],
["type", "TextArea", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "TextArea", "Hook[TextArea]", "{ text String('') } Hook[TextArea]"],
["method", "Text", "$[String]"],
["type", "Slider", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "Slider", "Hook[Slider]", "{ value Int, min Int, max Int } Hook[Slider]"],
["method", "Value", "$[Int]"],
["type", "ProgressBar", "record { Widget Widget }"],
["field", "Widget", "Widget"],
["function", "ProgressBar", "Hook[ProgressBar]", "{ value $[Int], max Int, format String('') } Hook[ProgressBar]"],
["type", "ListView", "record {\n    Widget       Widget,\n    Extension    $[Maybe[Widget]],\n    Current      $[Maybe[String]],\n    Selection    $[List[String]],\n    Activations  $[String]\n}"],
["field", "Widget", "Widget"],
["field", "Extension", "$[Maybe[Widget]]"],
["field", "Current", "$[Maybe[String]]"],
["field", "Selection", "$[List[String]]"],
["field", "Activations", "$[String]"],
["function", "ListView", "Hook[ListView[T]]", "[T] {\n    data     $[List[T]],\n    key      Lambda[T, String],\n    content  Lambda[Pair[$[T],ItemInfo], Hook[ItemView]],\n    headers  List[HeaderView] (List()),\n    stretch  Int (-1),\n    select   ItemSelect (Single)\n       }     Hook[ListView[T]]"],
["type", "ItemView", "record {\n    <Widgets>   Widgets,\n    <Extension> Maybe[Widget]\n}"],
["field", "<Widgets>", "Widgets"],
["field", "<Extension>", "Maybe[Widget]"],
["function", "ItemView", "Hook[ItemView]", "{ widgets Widgets, extension Maybe[Widget] (Null) } Hook[ItemView]"],
["type", "ListEditView", "record {\n    Widget     Widget,\n    Output     $[List[T]],\n    Extension  $[Maybe[Widget]],\n    <EditOps>  Subject[<ListEditOperation>[T]]\n}"],
["field", "Widget", "Widget"],
["field", "Output", "$[List[T]]"],
["field", "Extension", "$[Maybe[Widget]]"],
["field", "<EditOps>", "Subject[<ListEditOperation>[T]]"],
["function", "ListEditView", "Hook[ListEditView[T]]", "[T] {\n    initial  List[T],\n    content  Lambda[Pair[T,ItemInfo], Hook[ItemEditView[T]]],\n    headers  List[HeaderView] (List()),\n    stretch  Int (-1),\n    select   ItemSelect (Single)\n       }     Hook[ListEditView[T]]"],
["operator", "bind-update", "$[Null]", "[T] {\n    list         ListEditView[T],\n    prepend      $[T] ($()),\n    append       $[T] ($()),\n    delete       $[Null] ($()),\n    move-up      $[Null] ($()),\n    move-down    $[Null] ($()),\n    move-top     $[Null] ($()),\n    move-bottom  $[Null] ($()),\n    reorder      $[Lambda[List[T],List[T]]] ($())\n       }         $[Null]"],
["type", "ItemEditView", "record {\n    <Widgets>    Widgets,\n    <Extension>  Maybe[Widget],\n    <EditOps>    Lambda[String,$[<ListEditOperation>[T]]]\n}"],
["field", "<Widgets>", "Widgets"],
["field", "<Extension>", "Maybe[Widget]"],
["field", "<EditOps>", "Lambda[String,$[<ListEditOperation>[T]]]"],
["function", "ItemEditView", "Hook[ItemEditView[T]]", "[T] {\n    widgets       Widgets,\n    extension     Maybe[Widget] (Null),\n    update        $[T] ($()),\n    delete        $[Null] ($()),\n    move-up       $[Null] ($()),\n    move-down     $[Null] ($()),\n    move-top      $[Null] ($()),\n    move-bottom   $[Null] ($()),\n    insert-above  $[T] ($()),\n    insert-below  $[T] ($())\n          }       Hook[ItemEditView[T]]"],
["type", "<ListEditOperation>", "union {\n    <Prepend>[T], <Append>[T],\n    <Update>[T], <Delete>,\n    <MoveUp>, <MoveDown>,\n    <MoveTop>, <MoveBottom>,\n    <InsertAbove>[T], <InsertBelow>[T],\n    <Reorder>[T]\n}"],
["type", "<Prepend>", "record { Value T }"],
["field", "Value", "T"],
["type", "<Append>", "record { Value T }"],
["field", "Value", "T"],
["type", "<Update>", "record { Key String, Value T }"],
["field", "Key", "String"],
["field", "Value", "T"],
["type", "<Delete>", "record { Key Maybe[String](Null) }"],
["field", "Key", "Maybe[String]"],
["type", "<MoveUp>", "record { Key Maybe[String](Null) }"],
["field", "Key", "Maybe[String]"],
["type", "<MoveDown>", "record { Key Maybe[String](Null) }"],
["field", "Key", "Maybe[String]"],
["type", "<MoveTop>", "record { Key Maybe[String](Null) }"],
["field", "Key", "Maybe[String]"],
["type", "<MoveBottom>", "record { Key Maybe[String](Null) }"],
["field", "Key", "Maybe[String]"],
["type", "<InsertAbove>", "record { PivotKey String, Value T }"],
["field", "PivotKey", "String"],
["field", "Value", "T"],
["type", "<InsertBelow>", "record { PivotKey String, Value T }"],
["field", "PivotKey", "String"],
["field", "Value", "T"],
["type", "<Reorder>", "record { Reorder Lambda[List[T],List[T]] }"],
["field", "Reorder", "Lambda[List[T],List[T]]"],
["type", "HeaderView", "union { String, Widget }"],
["type", "ItemSelect", "enum { N/A, Single, Multiple, MaybeMultiple }"],
["enum-value", "N/A", "ItemSelect"],
["enum-value", "Single", "ItemSelect"],
["enum-value", "Multiple", "ItemSelect"],
["enum-value", "MaybeMultiple", "ItemSelect"],
["type", "ItemInfo", "record { Key String, Pos $[ItemPos] }"],
["field", "Key", "String"],
["field", "Pos", "$[ItemPos]"],
["type", "ItemPos", "record { Index Int, Total Int }"],
["field", "Index", "Int"],
["field", "Total", "Int"],
["method", "IsFirst", "$[Bool]"],
["method", "IsLast", "$[Bool]"],
["type", "Editor", "record {\n    Widget      Widget,\n    <Output>    Subject[T],\n    <Override>  Subject[T],\n    <LastSave>  Subject[T],\n    <File>      Subject[Maybe[File]],\n    <Open>      EditorOpenBehavior[T],\n    <Save>      EditorSaveBehavior[T]\n}"],
["field", "Widget", "Widget"],
["field", "<Output>", "Subject[T]"],
["field", "<Override>", "Subject[T]"],
["field", "<LastSave>", "Subject[T]"],
["field", "<File>", "Subject[Maybe[File]]"],
["field", "<Open>", "EditorOpenBehavior[T]"],
["field", "<Save>", "EditorSaveBehavior[T]"],
["function", "Editor", "Hook[Editor[T]]", "[T] {\n    initial  EditorDocument[T],\n    content  Lambda[T,Hook[EditorView[T]]],\n    open     EditorOpenBehavior[T] ({ _ => $() }),\n    save     EditorSaveBehavior[T] ({ doc => $(doc.File?) })\n        }    Hook[Editor[T]]"],
["method", "Document", "$[EditorDocument[T]]"],
["method", "File", "$[Maybe[File]]"],
["method", "Output", "$[T]"],
["method", "LastSave", "$[T]"],
["method", "Modified", "$[Bool]"],
["function", "EditorDirty", "$[Bool]", "[T] { e Editor[T] } { T/== ==[T] } $[Bool]"],
["operator", "bind-override", "$[Null]", "[T] { e Editor[T], values $[T] } $[Null]"],
["operator", "bind-reset", "$[Null]", "[T] { e Editor[T], triggers $[Null] } $[Null]"],
["operator", "bind-open", "$[Null]", "[T] { e Editor[T], triggers $[Null] } $[Null]"],
["operator", "bind-save", "$[Null]", "[T] { e Editor[T], triggers $[Null] } $[Null]"],
["operator", "bind-save-as", "$[Null]", "[T] { e Editor[T], triggers $[Null] } $[Null]"],
["method", "Open", "$[Null]"],
["method", "Save", "$[Null]"],
["method", "SaveAs", "$[Null]"],
["type", "EditorOpenBehavior", "interface {\n    Open Lambda[Bool,$[EditorDocument[T]]]\n}"],
["abstract-method", "Open", "Lambda[Bool,$[EditorDocument[T]]]"],
["type", "EditorSaveBehavior", "interface {\n    Save Lambda[EditorDocument[T],$[Maybe[File]]]\n}"],
["abstract-method", "Save", "Lambda[EditorDocument[T],$[Maybe[File]]]"],
["type", "EditorDocument", "record {\n    File?  Maybe[File],\n    Data   T\n}"],
["field", "File?", "Maybe[File]"],
["field", "Data", "T"],
["function", "EditorDocument", "EditorDocument[T]", "[T] { file? Maybe[File], data T } EditorDocument[T]"],
["type", "EditorView", "record {\n    Widget     Widget,\n    NewValues  $[T]\n}"],
["field", "Widget", "Widget"],
["field", "NewValues", "$[T]"],
["function", "EditorView", "Hook[EditorView[T]]", "[T] { w Widget, new-values $[T] } Hook[EditorView[T]]"],
["type", "Hook", "record { <Job> $[T] }"],
["field", "<Job>", "$[T]"],
["function", "Hook", "Hook[T]", "[T] { value T } Hook[T]"],
["operator", "use", "Hook[B]", "[A,B] { h Hook[A], f Lambda[A,Hook[B]] } Hook[B]"],
["operator", "run", "$[X]", "[T,X] { h Hook[T], f Lambda[T,$[X]] } $[X]"],
["operator", "run", "$[X]", "[T,X] { o $[Hook[T]], f Lambda[T,$[X]] } $[X]"],
["function", "Hooks", "Hook[List[T]]", "[T] { l List[Hook[T]] } Hook[List[T]]"],
["function", "Effect", "Hook[Null]", "{ effect $[Null] } Hook[Null]"],
["function", "State", "Hook[State[T]]", "[T] { initial T } Hook[State[T]]"],
["function", "Memo", "Hook[$[T]]", "[T] { o $[T] } Hook[$[T]]"],
["function", "Subject", "Hook[Subject[T]]", "[T] { replay Int(0), items List[T] } Hook[Subject[T]]"],
["function", "Multicasting", "Hook[$[T]]", "[T] { o $[T] } Hook[$[T]]"],
["function", "Style", "Hook[Null]", "{ w Widget, o $[String] } Hook[Null]"],
["function", "ShowWindow", "$[Null]", "{ h Hook[Window] } $[Null]"],
["function", "ShowDialog", "$[T]", "[T] { h Hook[Dialog[T]] } $[T]"]]
}
